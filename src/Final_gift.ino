/**
 * Author:    Vikram vel
 * Created:   12.02.2023
 * Contact: www.ivkrm.com
 **/

//WUBBA LUBBA DUB DUB!

//Dear future me. Please forgive me. 
//I can't even begin to express how sorry I am for coding in Arduino IDE.  

#include <Arduino.h>
#include <WiFi.h>
#include <Wire.h> 
#include <ESPmDNS.h>
#include <PubSubClient.h>
#include <Adafruit_GFX.h>

#include <pwmWrite.h>

#include <SEMU_SSD1331.h>

#include "system.h"
#include <SPI.h>
#include "time.h"
#include "sntp.h"

/* WiFi Configuration*/
const char* ssid = "<<SSID>>";
const char* password = "<<Password>>";

/*Mqtt Configurations */
const char* mqtt_server = "broker.mqttdashboard.com";

/* Time zone*/
const char* ntpServer1 = "pool.ntp.org";
const char* ntpServer2 = "time.nist.gov";

// As if the value of seconds will fluctuate... 
const long  gmtOffset_sec = 3600;
const int   daylightOffset_sec = 3600;


const char* time_zone = "CET-1CEST,M3.5.0,M10.5.0/3";  // TimeZone rule for Europe/Rome including daylight adjustment rules (optional)

SEMU_SSD1331 display = SEMU_SSD1331(cs, dc, mosi, sclk, rst);

WiFiClient espClient;

PubSubClient client(espClient);

long lastMsg = 0;
//char msg[50];
static String msg;

/* Servo controls*/
int value = 0;
const int servoPin = 4;
int pos = 0;
Pwm pwm = Pwm();

int message_flag = 0;
int showLastMsg = 0;

uint32_t targetTime = 0;
int16_t xyz[3][NDOTS];
uint16_t col[NDOTS];

int pass = 0;
int16_t angleX = 0, angleY = 0, angleZ = 0;
int16_t speedX = 0, speedY = 0, speedZ = 0;

struct Button {
    const uint8_t PIN;
    uint32_t numberKeyPresses;
    bool pressed;
};

Button button = {32, 0, false};

void servo_sweep() {

  for (pos = 0; pos <= 180; pos=pos+5) {  // go from 0-180 degrees
    pwm.writeServo(servoPin, pos);    // set the servo position (degrees)
    delay(15);
  }
  for (pos = 180; pos >= 0; pos=pos-5) {  // go from 180-0 degrees
    pwm.writeServo(servoPin, pos);    // set the servo position (degrees)
    delay(15);
  }
}

void ARDUINO_ISR_ATTR isr(void* arg) {
    Button* s = static_cast<Button*>(arg);
    s->numberKeyPresses += 1;  // increase by 1 :P
    s->pressed = true;
}


void setup() {

  display.begin();

  /* Comment the below if you need not have a start up sequence 
     to test run the colors.*/
  startup_seq();

  Serial.begin(115200);
  setup_wifi();

  client.setServer(mqtt_server, 1883);
  client.setCallback(callback);
  display_setup(display);

  // set notification call-back function
  sntp_set_time_sync_notification_cb( timeavailable );
  
  // Autogenerated, do not edit. All changes will be undone.

  /**
   * NTP server address could be aquired via DHCP,
   *
   * NOTE: This call should be made BEFORE esp32 aquires IP address via DHCP,
   * otherwise SNTP option 42 would be rejected by default.
   * NOTE: configTime() function call if made AFTER DHCP-client run
   * will OVERRIDE aquired NTP server address
   */
  sntp_servermode_dhcp(1);    // (optional)
  
  /**
   * This will set configured ntp servers and constant TimeZone/daylightOffset
   * should be OK if your time zone does not need to adjust daylightOffset twice a year,
   * in such a case time adjustment won't be handled automagicaly.
   */
  
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer1, ntpServer2);
  /**
   * A more convenient approach to handle TimeZones with daylightOffset 
   * would be to specify a environmnet variable with TimeZone definition including daylight adjustmnet rules.
   * A list of rules for your zone could be obtained from https://github.com/esp8266/Arduino/blob/master/cores/esp8266/TZ.h
   */
  //configTzTime(time_zone, ntpServer1, ntpServer2);
  
  pinMode(button.PIN, INPUT_PULLUP);
  attachInterruptArg(button.PIN, isr, &button, FALLING);
}

// Magic. Do not touch.
void screen_saver()
{
  /* no comments for you
     it was hard to write
     so it should be hard to read
  */
  if (!message_flag)
  {
    matrix(xyz, col);
    rotate(xyz, angleX, angleY, angleZ);
    draw(xyz, col, display);

    angleX += speedX;
    angleY += speedY;
    angleZ += speedZ;

    if (pass > 400) speedY = 1;
    if (pass > 800) speedX = 1;
    if (pass > 1200) speedZ = 1;
    pass++;

    if (angleX >= SCALE) {
      angleX -= SCALE;
    }
    else if (angleX < 0) {
      angleX += SCALE;
    }

    if (angleY >= SCALE) {
      angleY -= SCALE;
    }
    else if (angleY < 0) {
     angleY += SCALE;
    }

    if (angleZ >= SCALE) {
     angleZ -= SCALE;
    }
    else if (angleZ < 0) {
      angleZ += SCALE;
    }
  }

  if(((millis() - targetTime) > (1000*10)) && message_flag)
  {
    message_flag = 0;
    display.clear();
  }
 
}


/* TODO: this is obviously not right ... this whole ducking module
sucks anyway */
/* The Idea was to also print Time along with screensaver,
   but it was a pain to print the time and clearing the OLED 
   after every update. So moved it to next release.

   I mean she can always check her mobile for time :P
*/
void printLocalTime()
{
  char msg[9];
  struct tm timeinfo;
  if(!getLocalTime(&timeinfo)){
    Serial.println("No time available (yet)");
    return;
  }
  Serial.println(&timeinfo, "%H:%M:%S"); 
  sprintf(msg,"%H:%M:%S",&timeinfo);
}

// Callback function (get's called when time adjusts via NTP)
void timeavailable(struct timeval *t)
{
  Serial.println("Got time adjustment from NTP!");
  printLocalTime();
}


void startup_seq()
{
  display.fillScreen(RED);
  delay(300);
  display.fillScreen(GREEN);
  delay(300);
  display.fillScreen(BLUE);
  delay(300);
  display.fillScreen(BLACK);
  delay(1000);

  //I wonder if she actually reads these.
  display.setCursor(20,5);
  display.setTextColor(WHITE);
  display.setTextSize(2);
  display.print("HELLO");

  display.setCursor(20,25);
  display.setTextColor(RED);
  display.setTextSize(2);
  display.print("LOVE");

  display.drawRect(0,0,96,64,MAGENTA);
  delay(1000);
}

//This code sucks, you know it and I know it.  
//Move on and call me an idiot later.
void loop() 
{
   if (!client.connected()) {
    reconnect();
  }
  client.loop();
  screen_saver();
  if (button.pressed) {
    Serial.printf("Button has been pressed\n");
    button.pressed = false;
    main_msg(&msg, msg.length());
  }
}

void setup_wifi() {
  delay(10);
  Serial.println();
  Serial.print("Connecting to ");
  Serial.println(ssid);
  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());
}

void callback(char* topic, byte* payload, unsigned int length) {
  Serial.print("Message arrived [");
  Serial.print(topic);
  Serial.print("] ");
  display.fillScreen(BLACK);


  for (int i = 0; i < length; i++) {
    Serial.print((char)payload[i]);
    //display.clear();
    msg += (char)payload[i];
  }

  main_msg(&msg, msg.length());
  servo_sweep();

  Serial.println();

  message_flag = 1;
  targetTime = millis();

}

void reconnect() {
  // Loop until we're reconnected
  while (!client.connected()) {
    Serial.print("Attempting MQTT connection...");

    // Attempt to connect
    uint64_t chipid = ESP.getEfuseMac(); // MAC address of ESP32
    uint16_t chip = (uint16_t)(chipid>>32);
    char clientid[25];

    snprintf(clientid,25,"WIFI-Display-%04X",chip);

    if (client.connect(clientid)) {

      Serial.println("connected");
      // Once connected, publish an announcement...
      //client.publish("Say", "-t 'hello world'");
      // ... and resubscribe
      client.subscribe("display1");

    } else {

      Serial.print("failed, rc=");
      Serial.print(client.state());
      Serial.println(" try again in 5 seconds");

      //! In the name of love. Before you break my heart.
      delay(5000);
    }
  }
}


/* 
You think this code can be written more efficiently?

Sure, try doing this a day before Valentine's day and then let's talk.!
*/
void main_msg(String *info, int length)
{ 
  targetTime = millis();
  display.clear();

  //Madness? THIS IS SPARTA!
  char* char_array = new char[length + 1];
  strcpy(char_array, info->c_str());

  display.drawRect(0,0,96,64,MAGENTA);
  display.setCursor(20,5);

  display.setTextColor(RED);
  display.setTextSize(1 );

  display.setTextWrap(true);  
  display.print(char_array);

  display.setRotation(1);

  delay(1000);

  Serial.println(char_array);

}

// THE END - Ta ta dAaaaa
